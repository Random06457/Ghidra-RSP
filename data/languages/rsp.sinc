# Coprocessor Computational instruction

# Multiply

define pcodeop vmulf;
:vmulf vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b000000 & vd & vs & vt & e {
    vd = vmulf(vs, vt, e:4);
}
define pcodeop vmacf;
:vmacf vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b001000 & vd & vs & vt & e {
    vd = vmacf(vs, vt, e:4);
}
define pcodeop vmulu;
:vmulu vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b000001 & vd & vs & vt & e {
    vd = vmulu(vs, vt, e:4);
}
define pcodeop vmacu;
:vmacu vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b001001 & vd & vs & vt & e {
    vd = vmacu(vs, vt, e:4);
}
define pcodeop vrndp;
:vrndp vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b000010 & vd & vs & vt & e {
    vd = vrndp(vs, vt, e:4);
}
define pcodeop vrndn;
:vrndn vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b001010 & vd & vs & vt & e {
    vd = vrndn(vs, vt, e:4);
}
define pcodeop vmulq;
:vmulq vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b000011 & vd & vs & vt & e {
    vd = vmulq(vs, vt, e:4);
}
define pcodeop vmacq;
:vmacq vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b001011 & vd & vs & vt & e {
    vd = vmacq(vs, vt, e:4);
}
define pcodeop vmudl;
:vmudl vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b000100 & vd & vs & vt & e {
    vd = vmudl(vs, vt, e:4);
}
define pcodeop vmadl;
:vmadl vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b001100 & vd & vs & vt & e {
    vd = vmadl(vs, vt, e:4);
}
define pcodeop vmudm;
:vmudm vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b000101 & vd & vs & vt & e {
    vd = vmudm(vs, vt, e:4);
}
define pcodeop vmadm;
:vmadm vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b001101 & vd & vs & vt & e {
    vd = vmadm(vs, vt, e:4);
}
define pcodeop vmudn;
:vmudn vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b000110 & vd & vs & vt & e {
    vd = vmudn(vs, vt, e:4);
}

define pcodeop vmadn;
:vmadn vd, vs, vt[e] is prime=0x12 & fct=0b001110 & vd & vs & vt & e {
    vd = vmadn(vs, vt, e:1);
}
define pcodeop vmuldh;
:vmudh vd, vs, vt[e] is prime=0x12 & bit25=1 & fct=0b000111 & vd & vs & vt & e {
    vt = vmuldh(vs, vt, e:4);
}
define pcodeop vmadh;
:vmadh vd, vs, vt[e] is prime=0x12 & fct=0b001111 & vd & vs & vt & e {
    vd = vmadh(vs, vt, e:1);
}

# Add

define pcodeop vadd;
:vadd vd, vs, vt[e] is prime=0x12 & fct=0b010000 & vd & vs & vt & e {
    vd = vadd(vs, vt, e:4);
}
define pcodeop vsub;
:vsub vd, vs, vt[e] is prime=0x12 & fct=0b010001 & vd & vs & vt & e {
    vd = vsub(vs, vt, e:4);
}
define pcodeop vabs;
:vabs vd, vs, vt[e] is prime=0x12 & fct=0b010011 & vd & vs & vt & e {
    vd = vabs(vs, vt, e:4);
}

define pcodeop vaddc;
:vaddc vd, vs, vt[e] is prime=0x12 & fct=0b010100 & vd & vs & vt & e {
    vd = vaddc(vs, vt, e:4);
}
define pcodeop vsubc;
:vsubc vd, vs, vt[e] is prime=0x12 & fct=0b010101 & vd & vs & vt & e {
    vd = vsubc(vs, vt, e:4);
}
define pcodeop vsar;
:vsar vd, vs, vt[e] is prime=0x12 & fct=0b011101 & vd & vs & vt & e {
    vd = vsar(vs, vt, e:4);
}


# Select
define pcodeop vlt;
:vlt vd, vs, vt[e] is prime=0x12 & fct=0b100000 & vd & vs & vt & e {
    vd = vlt(vs, vt, e:4);
}
define pcodeop veq;
:veq vd, vs, vt[e] is prime=0x12 & fct=0b100001 & vd & vs & vt & e {
    vd = veq(vs, vt, e:4);
}
define pcodeop vne;
:vne vd, vs, vt[e] is prime=0x12 & fct=0b100010 & vd & vs & vt & e {
    vd = vne(vs, vt, e:4);
}
define pcodeop vge;
:vge vd, vs, vt[e] is prime=0x12 & fct=0b100011 & vd & vs & vt & e {
    vd = vge(vs, vt, e:4);
}
define pcodeop vcl;
:vcl vd, vs, vt[e] is prime=0x12 & fct=0b100100 & vd & vs & vt & e {
    vd = vcl(vs, vt, e:4);
}
define pcodeop vch;
:vch vd, vs, vt[e] is prime=0x12 & fct=0b100101 & vd & vs & vt & e {
    vd = vch(vs, vt, e:4);
}
define pcodeop vcr;
:vcr vd, vs, vt[e] is prime=0x12 & fct=0b100110 & vd & vs & vt & e {
    vd = vcr(vs, vt, e:4);
}
define pcodeop vmrg;
:vmrg vd, vs, vt[e] is prime=0x12 & fct=0b100111 & vd & vs & vt & e {
    vd = vmrg(vs, vt, e:4);
}


# Logical
define pcodeop vand;
:vand vd, vs, vt[e] is prime=0x12 & fct=0b101000 & vd & vs & vt & e {
    vd = vand(vs, vt, e:4);
}
define pcodeop vnand;
:vnand vd, vs, vt[e] is prime=0x12 & fct=0b101001 & vd & vs & vt & e {
    vd = vnand(vs, vt, e:4);
}
define pcodeop vor;
:vor vd, vs, vt[e] is prime=0x12 & fct=0b101010 & vd & vs & vt & e {
    vd = vor(vs, vt, e:4);
}
define pcodeop vnor;
:vnor vd, vs, vt[e] is prime=0x12 & fct=0b101011 & vd & vs & vt & e {
    vd = vnor(vs, vt, e:4);
}

define pcodeop vxor;
:vxor vd, vs, vt[e] is prime=0x12 & fct=0b101100 & vd & vs & vt & e {
    vt = vxor(vs, vt, e:4);
}
define pcodeop vvxor;
:vvxor vd, vs, vt[e] is prime=0x12 & fct=0b101101 & vd & vs & vt & e {
    vd = vvxor(vs, vt, e:4);
}


# Divide
define pcodeop vrcp;
:vrcp vd, vs, vt[e] is prime=0x12 & fct=0b110000 & vd & vs & vt & e {
    vd = vrcp(vs, vt, e:4);
}
define pcodeop vrcpl;
:vrcpl vd, vs, vt[e] is prime=0x12 & fct=0b110001 & vd & vs & vt & e {
    vd = vrcpl(vs, vt, e:4);
}
define pcodeop vrcph;
:vrcph vd, vs, vt[e] is prime=0x12 & fct=0b110010 & vd & vs & vt & e {
    vd = vrcph(vs, vt, e:4);
}
define pcodeop vmov;
:vmov vd, vs, vt[e] is prime=0x12 & fct=0b110011 & vd & vs & vt & e {
    vd = vmov(vs, vt, e:4);
}
define pcodeop vrsq;
:vrsq vd, vs, vt[e] is prime=0x12 & fct=0b110100 & vd & vs & vt & e {
    vd = vrsq(vs, vt, e:4);
}
define pcodeop vrsql;
:vrsql vd, vs, vt[e] is prime=0x12 & fct=0b110101 & vd & vs & vt & e {
    vd = vrsql(vs, vt, e:4);
}
define pcodeop vrsqh;
:vrsqh vd, vs, vt[e] is prime=0x12 & fct=0b110110 & vd & vs & vt & e {
    vd = vrsqh(vs, vt, e:4);
}
:vnop is prime=0x12 & fct=0b110111 {

}


# LWC2 / SWC2

:lbv vt[0x0], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x0 & OFF06_BASE {
    vt[0,8] = *OFF06_BASE;
}
:lbv vt[0x1], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x1 & OFF06_BASE {
    vt[8,8] = *OFF06_BASE;
}
:lbv vt[0x2], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x2 & OFF06_BASE {
    vt[16,8] = *OFF06_BASE;
}
:lbv vt[0x3], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x3 & OFF06_BASE {
    vt[24,8] = *OFF06_BASE;
}
:lbv vt[0x4], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x4 & OFF06_BASE {
    vt[32,8] = *OFF06_BASE;
}
:lbv vt[0x5], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x5 & OFF06_BASE {
    vt[40,8] = *OFF06_BASE;
}
:lbv vt[0x6], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x6 & OFF06_BASE {
    vt[48,8] = *OFF06_BASE;
}
:lbv vt[0x7], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x7 & OFF06_BASE {
    vt[56,8] = *OFF06_BASE;
}
:lbv vt[0x8], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x8 & OFF06_BASE {
    vt[64,8] = *OFF06_BASE;
}
:lbv vt[0x9], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0x9 & OFF06_BASE {
    vt[72,8] = *OFF06_BASE;
}
:lbv vt[0xA], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0xA & OFF06_BASE {
    vt[80,8] = *OFF06_BASE;
}
:lbv vt[0xB], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0xB & OFF06_BASE {
    vt[88,8] = *OFF06_BASE;
}
:lbv vt[0xC], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0xC & OFF06_BASE {
    vt[96,8] = *OFF06_BASE;
}
:lbv vt[0xD], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0xD & OFF06_BASE {
    vt[104,8] = *OFF06_BASE;
}
:lbv vt[0xE], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0xE & OFF06_BASE {
    vt[112,8] = *OFF06_BASE;
}
:lbv vt[0xF], OFF06_BASE is prime=0b110010 & cop2lsop=0b00000 & vt & element=0xF & OFF06_BASE {
    vt[120,8] = *OFF06_BASE;
}

:sbv vt[0x0], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x0 & OFF06_BASE {
    *OFF06_BASE = vt[0,8];
}
:sbv vt[0x1], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x1 & OFF06_BASE {
    *OFF06_BASE = vt[8,8];
}
:sbv vt[0x2], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x2 & OFF06_BASE {
    *OFF06_BASE = vt[16,8];
}
:sbv vt[0x3], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x3 & OFF06_BASE {
    *OFF06_BASE = vt[24,8];
}
:sbv vt[0x4], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x4 & OFF06_BASE {
    *OFF06_BASE = vt[32,8];
}
:sbv vt[0x5], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x5 & OFF06_BASE {
    *OFF06_BASE = vt[40,8];
}
:sbv vt[0x6], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x6 & OFF06_BASE {
    *OFF06_BASE = vt[48,8];
}
:sbv vt[0x7], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x7 & OFF06_BASE {
    *OFF06_BASE = vt[56,8];
}
:sbv vt[0x8], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x8 & OFF06_BASE {
    *OFF06_BASE = vt[64,8];
}
:sbv vt[0x9], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0x9 & OFF06_BASE {
    *OFF06_BASE = vt[72,8];
}
:sbv vt[0xA], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0xA & OFF06_BASE {
    *OFF06_BASE = vt[80,8];
}
:sbv vt[0xB], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0xB & OFF06_BASE {
    *OFF06_BASE = vt[88,8];
}
:sbv vt[0xC], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0xC & OFF06_BASE {
    *OFF06_BASE = vt[96,8];
}
:sbv vt[0xD], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0xD & OFF06_BASE {
    *OFF06_BASE = vt[104,8];
}
:sbv vt[0xE], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0xE & OFF06_BASE {
    *OFF06_BASE = vt[112,8];
}
:sbv vt[0xF], OFF06_BASE is prime=0b111010 & cop2lsop=0b00000 & vt & element=0xF & OFF06_BASE {
    *OFF06_BASE = vt[120,8];
}

:lsv vt[0x0], OFF06L1_BASE is prime=0b110010 & cop2lsop=0b00001 & vt & element=0x0 & OFF06L1_BASE {
    vt[0,16] = *OFF06L1_BASE;
}
:lsv vt[0x2], OFF06L1_BASE is prime=0b110010 & cop2lsop=0b00001 & vt & element=0x2 & OFF06L1_BASE {
    vt[16,16] = *OFF06L1_BASE;
}
:lsv vt[0x4], OFF06L1_BASE is prime=0b110010 & cop2lsop=0b00001 & vt & element=0x4 & OFF06L1_BASE {
    vt[32,16] = *OFF06L1_BASE;
}
:lsv vt[0x6], OFF06L1_BASE is prime=0b110010 & cop2lsop=0b00001 & vt & element=0x6 & OFF06L1_BASE {
    vt[48,16] = *OFF06L1_BASE;
}
:lsv vt[0x8], OFF06L1_BASE is prime=0b110010 & cop2lsop=0b00001 & vt & element=0x8 & OFF06L1_BASE {
    vt[64,16] = *OFF06L1_BASE;
}
:lsv vt[0xA], OFF06L1_BASE is prime=0b110010 & cop2lsop=0b00001 & vt & element=0xA & OFF06L1_BASE {
    vt[80,16] = *OFF06L1_BASE;
}
:lsv vt[0xC], OFF06L1_BASE is prime=0b110010 & cop2lsop=0b00001 & vt & element=0xC & OFF06L1_BASE {
    vt[96,16] = *OFF06L1_BASE;
}
:lsv vt[0xE], OFF06L1_BASE is prime=0b110010 & cop2lsop=0b00001 & vt & element=0xE & OFF06L1_BASE {
    vt[112,16] = *OFF06L1_BASE;
}
:ssv vt[0x0], OFF06L1_BASE is prime=0b111010 & cop2lsop=0b00001 & vt & element=0x0 & OFF06L1_BASE {
    *OFF06L1_BASE = vt[0,16];
}
:ssv vt[0x2], OFF06L1_BASE is prime=0b111010 & cop2lsop=0b00001 & vt & element=0x2 & OFF06L1_BASE {
    *OFF06L1_BASE = vt[16,16];
}
:ssv vt[0x4], OFF06L1_BASE is prime=0b111010 & cop2lsop=0b00001 & vt & element=0x4 & OFF06L1_BASE {
    *OFF06L1_BASE = vt[32,16];
}
:ssv vt[0x6], OFF06L1_BASE is prime=0b111010 & cop2lsop=0b00001 & vt & element=0x6 & OFF06L1_BASE {
    *OFF06L1_BASE = vt[48,16];
}
:ssv vt[0x8], OFF06L1_BASE is prime=0b111010 & cop2lsop=0b00001 & vt & element=0x8 & OFF06L1_BASE {
    *OFF06L1_BASE = vt[64,16];
}
:ssv vt[0xA], OFF06L1_BASE is prime=0b111010 & cop2lsop=0b00001 & vt & element=0xA & OFF06L1_BASE {
    *OFF06L1_BASE = vt[80,16];
}
:ssv vt[0xC], OFF06L1_BASE is prime=0b111010 & cop2lsop=0b00001 & vt & element=0xC & OFF06L1_BASE {
    *OFF06L1_BASE = vt[96,16];
}
:ssv vt[0xE], OFF06L1_BASE is prime=0b111010 & cop2lsop=0b00001 & vt & element=0xE & OFF06L1_BASE {
    *OFF06L1_BASE = vt[112,16];
}

:llv vt[0x0], OFF06L2_BASE is prime=0b110010 & cop2lsop=0b00010 & vt & element=0 & OFF06L2_BASE {
    vt[0,32] = *OFF06L2_BASE;
}
:llv vt[0x4], OFF06L2_BASE is prime=0b110010 & cop2lsop=0b00010 & vt & element=0x4 & OFF06L2_BASE {
    vt[32,32] = *OFF06L2_BASE;
}
:llv vt[0x8], OFF06L2_BASE is prime=0b110010 & cop2lsop=0b00010 & vt & element=0x8 & OFF06L2_BASE {
    vt[64,32] = *OFF06L2_BASE;
}
:llv vt[0xC], OFF06L2_BASE is prime=0b110010 & cop2lsop=0b00010 & vt & element=0xc & OFF06L2_BASE {
    vt[96,32] = *OFF06L2_BASE;
}
:slv vt[0x0], OFF06L2_BASE is prime=0b111010 & cop2lsop=0b00010 & vt & element=0 & OFF06L2_BASE {
    *OFF06L2_BASE = vt[0,32];
}
:slv vt[0x4], OFF06L2_BASE is prime=0b111010 & cop2lsop=0b00010 & vt & element=0x4 & OFF06L2_BASE {
    *OFF06L2_BASE = vt[32,32];
}
:slv vt[0x8], OFF06L2_BASE is prime=0b111010 & cop2lsop=0b00010 & vt & element=0x8 & OFF06L2_BASE {
    *OFF06L2_BASE = vt[64,32];
}
:slv vt[0xC], OFF06L2_BASE is prime=0b111010 & cop2lsop=0b00010 & vt & element=0xc & OFF06L2_BASE {
    *OFF06L2_BASE = vt[96,32];
}

:ldv vt[0x0], OFF06L3_BASE is prime=0b110010 & cop2lsop=0b00011 & vt & element=0 & OFF06L3_BASE {
    vt[0,64] = *OFF06L3_BASE;
}
:ldv vt[0x8], OFF06L3_BASE is prime=0b110010 & cop2lsop=0b00011 & vt & element=8 & OFF06L3_BASE {
    vt[64,64] = *OFF06L3_BASE;
}
:sdv vt[0x0], OFF06L3_BASE is prime=0b111010 & cop2lsop=0b00011 & vt & element=0 & OFF06L3_BASE {
    *OFF06L3_BASE = vt[0,64];
}
:sdv vt[0x8], OFF06L3_BASE is prime=0b111010 & cop2lsop=0b00011 & vt & element=8 & OFF06L3_BASE {
    *OFF06L3_BASE = vt[64,64];
}

define pcodeop lqv;
:lqv vt[0x0], OFF06L4_BASE is prime=0b110010 & cop2lsop=0b00100 & vt & element=0 & OFF06L4_BASE {
    vt = lqv(OFF06L4_BASE);
}
define pcodeop sqv;
:sqv vt[0x0], OFF06L4_BASE is prime=0b111010 & cop2lsop=0b00100 & vt & element=0 & OFF06L4_BASE {
    sqv(vt, OFF06L4_BASE);
}

define pcodeop lrv;
:lrv vt[0x0], OFF06L4_BASE is prime=0b110010 & cop2lsop=0b00101 & vt & element=0x0 & OFF06L4_BASE {
    vt = lrv(OFF06L4_BASE);
}
define pcodeop srv;
:srv vt[0x0], OFF06L4_BASE is prime=0b111010 & cop2lsop=0b00101 & vt & element=0x0 & OFF06L4_BASE {
    srv(vt, OFF06L4_BASE);
}

define pcodeop lpv;
:lpv vt[element], OFF06L3_BASE is prime=0b110010 & cop2lsop=0b00110 & vt & element & OFF06L3_BASE {
    vt = lpv(element:1, OFF06L3_BASE);
}
define pcodeop spv;
:spv vt[element], OFF06L3_BASE is prime=0b111010 & cop2lsop=0b00110 & vt & element & OFF06L3_BASE {
    spv(vt, element:1, OFF06L3_BASE);
}

define pcodeop luv;
:luv vt[element], OFF06L3_BASE is prime=0b110010 & cop2lsop=0b00111 & vt & element & OFF06L3_BASE {
    vt = luv(element:1, OFF06L3_BASE);
}
define pcodeop suv;
:suv vt[element], OFF06L3_BASE is prime=0b111010 & cop2lsop=0b00111 & vt & element & OFF06L3_BASE {
    suv(vt, element:1, OFF06L3_BASE);
}

define pcodeop lhv;
:lhv vt[element], OFF06L4_BASE is prime=0b110010 & cop2lsop=0b01000 & vt & element & OFF06L4_BASE  {
    vt = lhv(element:1, OFF06L4_BASE);
}
define pcodeop shv;
:shv vt[element], OFF06L4_BASE is prime=0b111010 & cop2lsop=0b01000 & vt & element & OFF06L4_BASE  {
    shv(vt, element:1, OFF06L4_BASE);
}

define pcodeop lfv;
:lfv vt[element], OFF06L4_BASE is prime=0b110010 & cop2lsop=0b01001 & vt & element & OFF06L4_BASE  {
    vt = lfv(element:1, OFF06L4_BASE);
}
define pcodeop sfv;
:sfv vt[element], OFF06L4_BASE is prime=0b111010 & cop2lsop=0b01001 & vt & element & OFF06L4_BASE  {
    sfv(vt, element:1, OFF06L4_BASE);
}

define pcodeop ltv;
:ltv vt[element], OFF06L4_BASE is prime=0b110010 & cop2lsop=0b01011 & vt & element & OFF06L4_BASE  {
    vt = ltv(element:1, OFF06L4_BASE);
}
define pcodeop stv;
:stv vt[element], OFF06L4_BASE is prime=0b111010 & cop2lsop=0b01011 & vt & element & OFF06L4_BASE  {
    stv(vt, element:1, OFF06L4_BASE);
}

:mtc2 rt, vs[0x0] is prime=0x12 & copop=4 & rt & vs & element=0x0 {
    vs[0,16] = rt[0,16];
}
:mtc2 rt, vs[0x2] is prime=0x12 & copop=4 & rt & vs & element=0x2 {
    vs[16,16] = rt[0,16];
}
:mtc2 rt, vs[0x4] is prime=0x12 & copop=4 & rt & vs & element=0x4 {
    vs[32,16] = rt[0,16];
}
:mtc2 rt, vs[0x6] is prime=0x12 & copop=4 & rt & vs & element=0x6 {
    vs[48,16] = rt[0,16];
}
:mtc2 rt, vs[0x8] is prime=0x12 & copop=4 & rt & vs & element=0x8 {
    vs[64,16] = rt[0,16];
}
:mtc2 rt, vs[0xA] is prime=0x12 & copop=4 & rt & vs & element=0xA {
    vs[80,16] = rt[0,16];
}
:mtc2 rt, vs[0xC] is prime=0x12 & copop=4 & rt & vs & element=0xC {
    vs[96,16] = rt[0,16];
}
:mtc2 rt, vs[0xE] is prime=0x12 & copop=4 & rt & vs & element=0xE {
    vs[112,16] = rt[0,16];
}
